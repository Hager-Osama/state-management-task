{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hager\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\component\\\\checkBox\\\\checkBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckBox = () => {\n  _s();\n  const [selectedOption, setSelectedOption] = useState('');\n  const [textFeildValue, setTextFieldValue] = useState('');\n  const handleCheckBoxChange = event => {\n    setSelectedOption(event.target.value);\n    setTextFieldValue(event.target.value);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox1\",\n        value: \"option1\",\n        checked: selectedOption === \"option1\",\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox1\",\n        children: \"1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox2\",\n        value: \"option2\",\n        checked: selectedOption === \"option2\",\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox2\",\n        children: \"2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox3\",\n        value: \"option3\",\n        checked: selectedOption === \"option3\",\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox3\",\n        children: \"3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      class: \"form-control \",\n      type: \"text\",\n      value: textFeildValue,\n      onChange: event => setTextFieldValue(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 3\n  }, this);\n};\n_s(CheckBox, \"oqN/87b8LMbqKKGSnGt5SSCaGes=\");\n_c = CheckBox;\nexport default CheckBox;\nvar _c;\n$RefreshReg$(_c, \"CheckBox\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CheckBox","_s","selectedOption","setSelectedOption","textFeildValue","setTextFieldValue","handleCheckBoxChange","event","target","value","className","children","class","type","id","checked","onChange","fileName","_jsxFileName","lineNumber","columnNumber","for","_c","$RefreshReg$"],"sources":["C:/Users/Hager/Desktop/New folder/my-app/src/component/checkBox/checkBox.js"],"sourcesContent":["import React, { useState } from 'react'\r\n\r\nconst CheckBox = () => {\r\n  const [selectedOption,setSelectedOption]=useState('');\r\n  const [textFeildValue, setTextFieldValue]=useState('');\r\n  const handleCheckBoxChange =(event)=>{\r\n    setSelectedOption(event.target.value);\r\n    setTextFieldValue( event.target.value);\r\n  }\r\n  return (\r\n  <div className='container text-center'>\r\n  <div class=\"form-check form-check-inline\">\r\n    <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\" \r\n    checked={selectedOption===\"option1\"}\r\n    onChange= {handleCheckBoxChange}/>\r\n    <label class=\"form-check-label\" for=\"inlineCheckbox1\">1</label>\r\n  </div>\r\n  <div class=\"form-check form-check-inline\">\r\n    <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox2\" value=\"option2\"\r\n    checked={ selectedOption===\"option2\"}\r\n    onChange={handleCheckBoxChange}/>\r\n    <label class=\"form-check-label\" for=\"inlineCheckbox2\">2</label>\r\n  </div>\r\n  <div class=\"form-check form-check-inline\">\r\n    <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox3\" value=\"option3\"\r\n    checked={ selectedOption===\"option3\"}\r\n    onChange={handleCheckBoxChange} />\r\n    <label class=\"form-check-label\" for=\"inlineCheckbox3\">3</label>\r\n  </div>\r\n    <input\r\n      class=\"form-control \"\r\n        type=\"text\"\r\n        value={textFeildValue}\r\n        onChange={(event) => setTextFieldValue(event.target.value)}\r\n      />\r\n  \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default CheckBox\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}