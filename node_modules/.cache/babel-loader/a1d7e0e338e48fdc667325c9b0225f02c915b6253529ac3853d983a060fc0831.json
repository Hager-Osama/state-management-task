{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Hager\\\\Desktop\\\\New folder\\\\my-app\\\\src\\\\component\\\\checkBox\\\\checkBox.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CheckBoxComponent = () => {\n  _s();\n  const [selectedOptions, setSelectedOptions] = useState([]); // Store selected checkbox values as an array\n  const [textFieldValue, setTextFieldValue] = useState(''); // Store the text field value\n\n  const handleCheckBoxChange = event => {\n    const updatedSelectedOptions = [...selectedOptions]; // Create a copy of the selected options array\n\n    if (event.target.checked) {\n      // If the checkbox is checked\n      updatedSelectedOptions.push(event.target.value); // Add the checkbox value to the array\n    } else {\n      // If the checkbox is unchecked\n      const index = updatedSelectedOptions.indexOf(event.target.value); // Find the index of the checkbox value in the array\n      updatedSelectedOptions.splice(index, 1); // Remove the checkbox value from the array\n    }\n\n    setSelectedOptions(updatedSelectedOptions); // Update the selected options state\n\n    // Update the text field value with the selected options\n    let newTextFieldValue = updatedSelectedOptions.join(', '); // Combine selected options using join()\n    setTextFieldValue(newTextFieldValue);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container text-center\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      class: \"form-control\",\n      type: \"text\",\n      value: textFieldValue,\n      onChange: event => setTextFieldValue(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox1\",\n        value: \"option1\",\n        checked: selectedOptions.includes('option1'),\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox1\",\n        children: \"Option 1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox2\",\n        value: \"option2\",\n        checked: selectedOptions.includes('option2'),\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox2\",\n        children: \"Option 2\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      class: \"form-check form-check-inline\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        class: \"form-check-input\",\n        type: \"checkbox\",\n        id: \"inlineCheckbox3\",\n        value: \"option3\",\n        checked: selectedOptions.includes('option3'),\n        onChange: handleCheckBoxChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        class: \"form-check-label\",\n        for: \"inlineCheckbox3\",\n        children: \"Option 3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n};\n_s(CheckBoxComponent, \"QUJwsZKZQEx6cOqL+4j/GArIhik=\");\n_c = CheckBoxComponent;\nexport default CheckBoxComponent;\nvar _c;\n$RefreshReg$(_c, \"CheckBoxComponent\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","CheckBoxComponent","_s","selectedOptions","setSelectedOptions","textFieldValue","setTextFieldValue","handleCheckBoxChange","event","updatedSelectedOptions","target","checked","push","value","index","indexOf","splice","newTextFieldValue","join","className","children","class","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","id","includes","for","_c","$RefreshReg$"],"sources":["C:/Users/Hager/Desktop/New folder/my-app/src/component/checkBox/checkBox.js"],"sourcesContent":["import React, { useState } from 'react';\r\n\r\nconst CheckBoxComponent = () => {\r\n  const [selectedOptions, setSelectedOptions] = useState([]); // Store selected checkbox values as an array\r\n  const [textFieldValue, setTextFieldValue] = useState(''); // Store the text field value\r\n\r\n  const handleCheckBoxChange = (event) => {\r\n    const updatedSelectedOptions = [...selectedOptions]; // Create a copy of the selected options array\r\n\r\n    if (event.target.checked) { // If the checkbox is checked\r\n      updatedSelectedOptions.push(event.target.value); // Add the checkbox value to the array\r\n    }else { // If the checkbox is unchecked\r\n      const index = updatedSelectedOptions.indexOf(event.target.value); // Find the index of the checkbox value in the array\r\n      updatedSelectedOptions.splice(index, 1); // Remove the checkbox value from the array\r\n    }\r\n    \r\n    setSelectedOptions(updatedSelectedOptions); // Update the selected options state\r\n\r\n    // Update the text field value with the selected options\r\n    let newTextFieldValue = updatedSelectedOptions.join(', '); // Combine selected options using join()\r\n    setTextFieldValue(newTextFieldValue);}\r\n  return (\r\n    <div className='container text-center'>\r\n      <input class=\"form-control\" type=\"text\" value={textFieldValue} onChange={(event) => setTextFieldValue(event.target.value)} />\r\n      <div class=\"form-check form-check-inline\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox1\" value=\"option1\" checked={selectedOptions.includes('option1')} onChange={handleCheckBoxChange} />\r\n        <label class=\"form-check-label\" for=\"inlineCheckbox1\">Option 1</label>\r\n      </div>\r\n      <div class=\"form-check form-check-inline\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox2\" value=\"option2\" checked={selectedOptions.includes('option2')} onChange={handleCheckBoxChange} />\r\n        <label class=\"form-check-label\" for=\"inlineCheckbox2\">Option 2</label>\r\n      </div>\r\n      <div class=\"form-check form-check-inline\">\r\n        <input class=\"form-check-input\" type=\"checkbox\" id=\"inlineCheckbox3\" value=\"option3\" checked={selectedOptions.includes('option3')} onChange={handleCheckBoxChange} />\r\n        <label class=\"form-check-label\" for=\"inlineCheckbox3\">Option 3</label>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CheckBoxComponent;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}